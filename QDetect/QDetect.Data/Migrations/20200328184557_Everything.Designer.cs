// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QDetect.Data;

namespace QDetect.Data.Migrations
{
    [DbContext(typeof(QDetectDbContext))]
    [Migration("20200328184557_Everything")]
    partial class Everything
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QDetect.Data.Models.Embedding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ImageId");

                    b.Property<int>("PersonId");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("PersonId");

                    b.ToTable("Embeddings");
                });

            modelBuilder.Entity("QDetect.Data.Models.EmbeddingValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmbeddingId");

                    b.Property<int>("Index");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("EmbeddingId");

                    b.ToTable("EmbeddingValues");
                });

            modelBuilder.Entity("QDetect.Data.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Link")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("QDetect.Data.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("QuarantineEndDate");

                    b.Property<string>("UCN")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("QDetect.Data.Models.PersonImage", b =>
                {
                    b.Property<int>("ImageId");

                    b.Property<int>("PersonId");

                    b.HasKey("ImageId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("PeopleImages");
                });

            modelBuilder.Entity("QDetect.Data.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("ImageId");

                    b.Property<bool>("IsArchived");

                    b.Property<int>("PersonId");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("PersonId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("QDetect.Data.Models.Embedding", b =>
                {
                    b.HasOne("QDetect.Data.Models.Image", "Image")
                        .WithMany("Embeddings")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QDetect.Data.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QDetect.Data.Models.EmbeddingValue", b =>
                {
                    b.HasOne("QDetect.Data.Models.Embedding", "Embedding")
                        .WithMany("Values")
                        .HasForeignKey("EmbeddingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QDetect.Data.Models.PersonImage", b =>
                {
                    b.HasOne("QDetect.Data.Models.Image", "Image")
                        .WithMany("Persons")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QDetect.Data.Models.Person", "Person")
                        .WithMany("Images")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QDetect.Data.Models.Report", b =>
                {
                    b.HasOne("QDetect.Data.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QDetect.Data.Models.Person", "Person")
                        .WithMany("Reports")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
